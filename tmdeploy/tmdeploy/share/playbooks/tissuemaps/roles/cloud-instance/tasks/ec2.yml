# TmDeploy - Automated setup and deployment of TissueMAPS in the cloud.
# Copyright (C) 2016-2019 University of Zurich.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

---
# Playbook for creating a virtual machine instance on Elastic Compute Cloud 2 (EC2).
#
# Requires the following environment variables:
#  - AWS_ACCESS_KEY_ID
#  - AWS_SECRET_ACCESS_KEY
- name: Create private network
  local_action: ec2_vpc_net
  args:
    state: present
    name: "{{ network }}"
    cidr_block: "{{ ip_range }}"
    region: "{{ region }}"
    multi_ok: no
    dns_support: yes
  register: network_facts
  run_once: yes

- name: Create internet gateway
  local_action: ec2_vpc_igw
  args:
    state: present
    vpc_id: "{{ network_facts.vpc.id }}"
    region: "{{ region }}"
  register: gateway_facts
  run_once: yes

- name: Create private subnetwork
  local_action: ec2_vpc_subnet
  args:
    state: present
    vpc_id: "{{ network_facts.vpc.id }}"
    cidr: "{{ ip_range }}"
    region: "{{ region }}"
    resource_tags:
      Name: "{{ subnetwork }}"
  register: subnet_facts
  run_once: yes

- name: Create route table
  local_action: ec2_vpc_route_table
  args:
    state: present
    vpc_id: "{{ network_facts.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ network }}"
    subnets:
      - "{{ subnet_facts.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ gateway_facts.gateway_id }}"
  run_once: yes

- name: Create compute-storage security group
  local_action: ec2_group
  args:
    state: present
    name: compute-storage
    region: "{{ region }}"
    vpc_id: "{{ network_facts.vpc.id }}"
    description: Private access
    rules: []
  run_once: yes

- name: Create web security group
  local_action: ec2_group
  args:
    state: present
    name: web
    vpc_id: "{{ network_facts.vpc.id }}"
    region: "{{ region }}"
    description: Public SSH and HTTP/HTTP access
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4852
        to_port: 4852
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: -1
        to_port:  -1
        cidr_ip: 0.0.0.0/0
  run_once: yes

- name: Update compute-storage security group
  local_action: ec2_group
  args:
    state: present
    name: compute-storage
    region: "{{ region }}"
    vpc_id: "{{ network_facts.vpc.id }}"
    description: Private access
    rules:
      - proto: tcp
        from_port: 1
        to_port: 65535
        group_name: web
      - proto: icmp
        from_port: -1
        to_port:  -1
        group_name: web
      - proto: udp
        from_port: 1
        to_port: 65535
        group_name: web
      - proto: tcp
        from_port: 1
        to_port: 65535
        group_name: compute-storage
      - proto: icmp
        from_port: -1
        to_port:  -1
        group_name: compute-storage
      - proto: udp
        from_port: 1
        to_port: 65535
        group_name: compute-storage
  run_once: yes

- name: Upload public SSH key
  local_action: ec2_key
  args:
    state: present
    region: "{{ region }}"
    name: "{{ key_name }}"
    wait: yes
    key_material: "{{ item }}"
  with_file: "{{ key_file }}"
  run_once: yes

- name: Define boot disk
  set_fact:
    instance_disks:
      # TODO: SSD device for root file system?
      - device_name: /dev/sda1
        volume_size: "{{ disk_size }}"
        volume_type: gp2
        delete_on_termination: yes
  when: disk_size is defined

- name: Use default boot disk
  set_fact:
    instance_disks: []
  when: disk_size is not defined

- name: Trigger creation of instance
  set_fact:
    instance_count: 1
  when: instance_state == 'present'

- name: Trigger removal of instance
  set_fact:
    instance_count: 0
  when: instance_state == 'absent'

- name: "{{ (instance_state == 'present') | ternary('Create','Remove') }} instance"
  local_action: ec2
  args:
    key_name: "{{ key_name }}"
    image: "{{ image }}"
    instance_type: "{{ flavor }}"
    instance_tags:
       Name: "{{ instance_name }}"
    count_tag: Name
    exact_count: "{{ instance_count }}"
    group: "{{ security_groups }}"
    wait: true
    wait_timeout: 300
    volumes: "{{ instance_disks }}"
    assign_public_ip: "{{ assign_public_ip }}"
    vpc_subnet_id: "{{ subnet_facts.subnet.id }}"
    region: "{{ region }}"
  register: instance

- debug:
    msg: "{{ (instance.instances|length) == 0 }}"

- name: Add new host to inventory
  add_host:
    groups: tmp
    hostname: "{{ instance_name }}"
    ansible_host: "{{ instance.tagged_instances[0].public_ip if assign_public_ip else instance.tagged_instances[0].private_ip }}"
    ansible_user: "{{ ansible_user }}"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
  when:
    - instance_state == 'present'
    - instance.instances|length == 0

- name: Add new host to inventory
  add_host:
    groups: tmp
    hostname: "{{ instance_name }}"
    ansible_host: "{{ instance.instances[0].public_ip if assign_public_ip else instance.instances[0].private_ip }}"
    ansible_user: "{{ ansible_user }}"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
  when:
    - instance_state == 'present'
    - instance.instances|length != 0

- name: "Create storage volume and attach it to instance"
  local_action: ec2_vol
  args:
    state: "{{ instance_state }}"
    device_name: "{{ volume_device_mapping[provider].name }}"
    instance: "{{ instance.tagged_instances[0].id if (instance.instances|length) == 0 else instance.instances[0].id }}"
    delete_on_termination: yes
    name: "{{ volume_name }}"
    region: "{{ region }}"
    volume_type: standard
    volume_size: "{{ volume_size }}"
  register: volume
  when:
    - instance_state == 'present'
    - volume_size is defined
